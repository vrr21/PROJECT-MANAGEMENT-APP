const { pool, sql, poolConnect } = require('../config/db');
const db = require("../config/db");

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
exports.getAllTasks = async (req, res) => {
  const { employee, team } = req.query;

  try {
    await poolConnect;
    const request = pool.request();
    if (employee) request.input('EmployeeID', sql.Int, parseInt(employee));
    if (team) request.input('TeamID', sql.Int, parseInt(team));

    const result = await request.query(`
      SELECT 
  t.ID_Task,
  t.Task_Name,
  t.Description,
  t.Time_Norm,
  t.Deadline,
  s.Status_Name,
  o.Order_Name,
  o.ID_Manager,  -- ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
  tm.Team_Name,
  u.ID_User,
  u.First_Name + ' ' + u.Last_Name AS Employee_Name,
  u.Avatar

      FROM Tasks t
      INNER JOIN Statuses s ON t.ID_Status = s.ID_Status
      INNER JOIN Orders o ON t.ID_Order = o.ID_Order
      INNER JOIN Teams tm ON o.ID_Team = tm.ID_Team
      LEFT JOIN Assignment a ON t.ID_Task = a.ID_Task
      LEFT JOIN Users u ON a.ID_Employee = u.ID_User
      WHERE 1=1
      ${employee ? 'AND EXISTS (SELECT 1 FROM Assignment a2 WHERE a2.ID_Task = t.ID_Task AND a2.ID_Employee = @EmployeeID)' : ''}
      ${team ? 'AND tm.ID_Team = @TeamID' : ''}
    `);

    const tasks = Object.values(
      result.recordset.reduce((acc, row) => {
        if (!acc[row.ID_Task]) {
          acc[row.ID_Task] = {
            ID_Task: row.ID_Task,
            Task_Name: row.Task_Name,
            Description: row.Description,
            Time_Norm: row.Time_Norm,
            Deadline: row.Deadline,
            Status_Name: row.Status_Name,
            Order_Name: row.Order_Name,
            Team_Name: row.Team_Name,
            Employees: []
          };
        }
        if (row.ID_User && row.Employee_Name) {
          acc[row.ID_Task].Employees.push({
            ID_Employee: row.ID_User,
            Full_Name: row.Employee_Name,
            Avatar: row.Avatar ?? null
          });
        }
        return acc;
      }, {})
    );

    res.status(200).json(tasks);
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á', error: error.message });
  }
};
// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
exports.createTask = async (req, res) => {
  try {
    const {
      Task_Name,
      Description,
      ID_Order,
      Time_Norm,
      Deadline,
      EmployeeIds,
      attachments,
      ID_Manager
    } = req.body;

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID_Manager
    if (!ID_Manager) {
      return res.status(400).json({ error: "ID_Manager –Ω–µ —É–∫–∞–∑–∞–Ω" });
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—Ç–∞—Ç—É—Å–∞ "–ù–æ–≤–∞—è" –∏–∑ –±–∞–∑—ã
    const statusResult = await db.pool
      .request()
      .input("Status_Name", db.sql.NVarChar, "–ù–æ–≤–∞—è")
      .query("SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name");

    if (!statusResult.recordset.length) {
      return res.status(400).json({ error: "–°—Ç–∞—Ç—É—Å '–ù–æ–≤–∞—è' –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const newStatusId = statusResult.recordset[0].ID_Status;

    // ‚úÖ –í—Å—Ç–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏
    const taskResult = await db.pool
      .request()
      .input("Task_Name", db.sql.NVarChar, Task_Name)
      .input("Description", db.sql.NVarChar, Description)
      .input("ID_Order", db.sql.Int, ID_Order)
      .input("Time_Norm", db.sql.Int, Time_Norm)
      .input("Deadline", db.sql.DateTime, Deadline ? new Date(Deadline) : null)
      .input("ID_Status", db.sql.Int, newStatusId)
      .input("ID_Manager", db.sql.Int, ID_Manager)
      .query(`
        INSERT INTO Tasks (Task_Name, Description, ID_Order, Time_Norm, Deadline, ID_Status, ID_Manager)
        OUTPUT INSERTED.ID_Task
        VALUES (@Task_Name, @Description, @ID_Order, @Time_Norm, @Deadline, @ID_Status, @ID_Manager)
      `);

    const newTaskId = taskResult.recordset[0].ID_Task;

    // ‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if (EmployeeIds && Array.isArray(EmployeeIds)) {
      for (const empId of EmployeeIds) {
        await db.pool
          .request()
          .input("ID_Task", db.sql.Int, newTaskId)
          .input("ID_Employee", db.sql.Int, empId)
          .input("ID_Status", db.sql.Int, newStatusId)
          .query(`
            INSERT INTO Assignment (ID_Task, ID_Employee, ID_Status)
            VALUES (@ID_Task, @ID_Employee, @ID_Status)
          `);
      }
    }

    // ‚úÖ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    res.status(201).json({
      ID_Task: newTaskId,
      Task_Name,
      Description,
      ID_Order,
      ID_Status: newStatusId,
      Deadline,
      EmployeeIds,
      attachments,
      ID_Manager
    });

  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏" });
  }
};


// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
exports.updateTask = async (req, res) => {
  const { id } = req.params;
  const { Task_Name, Description, Time_Norm, Status_Name, ID_Status, ID_Order, Deadline } = req.body;

  try {
    await poolConnect;

    let resolvedStatusId = ID_Status;
    if (!resolvedStatusId && Status_Name) {
      const statusResult = await pool.request()
        .input('Status_Name', sql.NVarChar, Status_Name)
        .query('SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name');
      if (!statusResult.recordset.length) {
        return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å' });
      }
      resolvedStatusId = statusResult.recordset[0].ID_Status;
    }

    if (!resolvedStatusId) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (ID_Status –∏–ª–∏ Status_Name)' });
    }

    const fields = [];
    const request = pool.request().input('ID_Task', sql.Int, id);

    if (Task_Name !== undefined) {
      fields.push('Task_Name = @Task_Name');
      request.input('Task_Name', sql.NVarChar, Task_Name);
    }
    if (Description !== undefined) {
      fields.push('Description = @Description');
      request.input('Description', sql.NVarChar, Description);
    }
    if (Time_Norm !== undefined) {
      fields.push('Time_Norm = @Time_Norm');
      request.input('Time_Norm', sql.Int, Time_Norm);
    }
    if (ID_Order !== undefined) {
      fields.push('ID_Order = @ID_Order');
      request.input('ID_Order', sql.Int, ID_Order);
    }
    if (Deadline !== undefined) {
      fields.push('Deadline = @Deadline');
      request.input('Deadline', sql.DateTime, Deadline);
    }

    fields.push('ID_Status = @ID_Status');
    request.input('ID_Status', sql.Int, resolvedStatusId);

    if (!fields.length) {
      return res.status(400).json({ message: '–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
    }

    const query = `UPDATE Tasks SET ${fields.join(', ')} WHERE ID_Task = @ID_Task`;
    await request.query(query);

    res.status(200).json({ message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', error: error.message });
  }
};

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
exports.deleteTask = async (req, res) => {
  const { id } = req.params;

  try {
    await poolConnect;
    await pool.request().input('ID_Task', sql.Int, id)
      .query('DELETE FROM Assignment WHERE ID_Task = @ID_Task');
    await pool.request().input('ID_Task', sql.Int, id)
      .query('DELETE FROM Tasks WHERE ID_Task = @ID_Task');

    res.status(200).json({ message: '–ó–∞–¥–∞—á–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã' });
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', error: error.message });
  }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ID
exports.getTasksByEmployee = async (req, res) => {
  const { id } = req.params;

  const employeeId = parseInt(id, 10);

  if (!employeeId || isNaN(employeeId)) {
    console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', id);
    return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞' });
  }

  try {
    await poolConnect;
    const result = await pool.request()
      .input('ID_User', sql.Int, employeeId)
      .query(`
        SELECT 
          t.ID_Task,
          t.Task_Name,
          t.Description,
          s.Status_Name,
          o.Order_Name,
          tm.Team_Name,
          t.Time_Norm,
          t.Deadline
        FROM Assignment a
        INNER JOIN Tasks t ON a.ID_Task = t.ID_Task
        INNER JOIN Statuses s ON t.ID_Status = s.ID_Status
        INNER JOIN Orders o ON t.ID_Order = o.ID_Order
        INNER JOIN Teams tm ON o.ID_Team = tm.ID_Team
        WHERE a.ID_Employee = @ID_User
      `);

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', error: error.message });
  }
};


// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—è–º–∏
exports.getTasksWithDetails = async (req, res) => {
  try {
    await poolConnect;
    const result = await pool.request().query(`
     SELECT 
  t.ID_Task,
  t.Task_Name,
  t.Description,
  t.Time_Norm,
  t.Deadline,
  t.Status_Updated_At, -- ‚úÖ –î–û–ë–ê–í–¨ –≠–¢–û
  s.Status_Name,
  o.Order_Name,
  o.ID_Order,
  o.ID_Manager,
  tm.Team_Name,
  u.ID_User,
  u.First_Name + ' ' + u.Last_Name AS Employee_Name,
  u.Avatar
FROM Tasks t
      LEFT JOIN Statuses s ON t.ID_Status = s.ID_Status
      LEFT JOIN Orders o ON t.ID_Order = o.ID_Order
      LEFT JOIN Teams tm ON o.ID_Team = tm.ID_Team
      LEFT JOIN Assignment a ON t.ID_Task = a.ID_Task
      LEFT JOIN Users u ON a.ID_Employee = u.ID_User
    `);

    const tasks = Object.values(
      result.recordset.reduce((acc, row) => {
        if (!acc[row.ID_Task]) {
          acc[row.ID_Task] = {
            ID_Task: row.ID_Task,
            Task_Name: row.Task_Name,
            Description: row.Description,
            Time_Norm: row.Time_Norm,
            Deadline: row.Deadline,
            Status_Name: row.Status_Name,
            Order_Name: row.Order_Name,
            ID_Order: row.ID_Order,
            ID_Manager: row.ID_Manager, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
            Team_Name: row.Team_Name,
            Employees: []
          };
          
        }
        if (row.ID_User && row.Employee_Name) {
          acc[row.ID_Task].Employees.push({
            id: row.ID_User,
            fullName: row.Employee_Name,
            avatar: row.Avatar ?? null
          });
        }
        return acc;
      }, {})
    );

    res.json(tasks);
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—è–º–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—è–º–∏', error: error.message });
  }
};
// üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏
exports.closeTask = async (req, res) => {
  const { id } = req.params;

  try {
    await poolConnect;

    // –ü–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    const statusResult = await pool.request()
      .input('Status_Name', sql.NVarChar, '–ó–∞–≤–µ—Ä—à–µ–Ω–∞')
      .query('SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name');

    if (!statusResult.recordset.length) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const completedStatusId = statusResult.recordset[0].ID_Status;

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ —Å—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    await pool.request()
      .input('ID_Task', sql.Int, id)
      .input('ID_Status', sql.Int, completedStatusId)
      .query('UPDATE Tasks SET ID_Status = @ID_Status WHERE ID_Task = @ID_Task');

    res.status(200).json({ message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞' });
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏', error: error.message });
  }
};
// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
exports.updateEmployeeTaskStatus = async (req, res) => {
  const { taskId } = req.params;
  const { employeeId, statusName } = req.body;

  if (!employeeId || !statusName) {
    return res.status(400).json({ message: 'employeeId –∏ statusName –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    await poolConnect;

    // –ù–∞–π—Ç–∏ ID —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∏–º–µ–Ω–∏
    const statusResult = await pool.request()
      .input('Status_Name', sql.NVarChar, statusName)
      .query('SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name');

    if (!statusResult.recordset.length) {
      return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å' });
    }

    const statusId = statusResult.recordset[0].ID_Status;

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ Assignment –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–¥–∞—á–∏
// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ Assignment –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–¥–∞—á–∏
await pool.request()
  .input('ID_Task', sql.Int, taskId)
  .input('ID_Employee', sql.Int, employeeId)
  .input('ID_Status', sql.Int, statusId)
  .query(`
    UPDATE Assignment
    SET ID_Status = @ID_Status
    WHERE ID_Task = @ID_Task AND ID_Employee = @ID_Employee
  `);

// ‚úÖ –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ Tasks
await pool.request()
  .input('ID_Task', sql.Int, taskId)
  .input('ID_Status', sql.Int, statusId)
  .query(`
    UPDATE Tasks
    SET ID_Status = @ID_Status
    WHERE ID_Task = @ID_Task
  `);


    res.status(200).json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', error: error.message });
  }
};

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
exports.deleteTasksWithoutEmployees = async (req, res) => {
  try {
    await poolConnect;

    const result = await pool.request().query(`
      DELETE FROM Tasks
      WHERE ID_Task IN (
        SELECT t.ID_Task
        FROM Tasks t
        LEFT JOIN Assignment a ON t.ID_Task = a.ID_Task
        WHERE a.ID_Employee IS NULL
      )
    `);

    res.status(200).json({ message: "–ó–∞–¥–∞—á–∏ –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω—ã" });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", error: error.message });
  }
};
