const { sql, poolConnect } = require('../config/db');

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º (–∏—Å–∫–ª—é—á–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã –∏ –Ω—É–ª–µ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
const getOrdersStats = async (req, res) => {
  try {
    const pool = await poolConnect;
    const result = await pool.request().query(`
      SELECT 
        CONVERT(VARCHAR(10), Tasks.Deadline, 120) AS TaskDate,
        COUNT(Tasks.ID_Task) AS Total_Tasks
      FROM Tasks
      WHERE Tasks.Deadline IS NOT NULL AND TRY_CONVERT(DATE, Tasks.Deadline) IS NOT NULL
      GROUP BY CONVERT(VARCHAR(10), Tasks.Deadline, 120)
    `);

    const data = result.recordset.filter(
      r => typeof r.TaskDate === 'string' && r.TaskDate.trim() !== '' &&
           typeof r.Total_Tasks === 'number' && r.Total_Tasks > 0
    );

    res.status(200).json(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º' });
  }
};

// üïë –ß–∞—Å—ã –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (–∏—Å–∫–ª—é—á–∞–µ—Ç –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞ –∏ –Ω—É–ª–µ–≤—ã–µ —á–∞—Å—ã)
// üïë –ß–∞—Å—ã –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
const getEmployeeHours = async (req, res) => {
  try {
    const pool = await poolConnect;
    const result = await pool.request().query(`
      SELECT Employee_Name, Total_Hours
      FROM EmployeeHoursReport
      WHERE Employee_Name IS NOT NULL AND Employee_Name <> '' AND Total_Hours IS NOT NULL AND Total_Hours > 0
    `);

    const data = result.recordset.map(r => ({
      Employee_Name: r.Employee_Name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
      Total_Hours: r.Total_Hours || 0
    }));

    res.status(200).json(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤' });
  }
};


// üìå –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–¥–∞—á (–∏—Å–∫–ª—é—á–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ –Ω—É–ª–µ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
const getTaskStatusSummary = async (req, res) => {
  try {
    const pool = await poolConnect;
    const result = await pool.request().query(`
      SELECT Status_Name, Task_Count
      FROM TaskStatusSummary
      WHERE Status_Name IS NOT NULL AND Status_Name <> '' AND Task_Count IS NOT NULL AND Task_Count > 0
    `);

    const data = result.recordset.filter(
      r => typeof r.Status_Name === 'string' && r.Status_Name.trim() !== '' &&
           typeof r.Task_Count === 'number' && r.Task_Count > 0
    );

    res.status(200).json(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TaskStatusSummary:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤' });
  }
};

module.exports = {
  getOrdersStats,
  getEmployeeHours,
  getTaskStatusSummary,
};
