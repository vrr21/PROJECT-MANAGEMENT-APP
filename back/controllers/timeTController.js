const { sql, poolConnect, pool } = require('../config/db');
const { createNotification } = require('../services/notification.service');

// üîπ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
const createTimeEntry = async (req, res) => {
  const { taskName, description, hours, date } = req.body;

  try {
    await poolConnect;

    const tokenUser = req.user;
    if (!tokenUser?.id) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    // 1. –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Execution
    await pool.request()
      .input('ID_Task', sql.Int, taskName)
      .input('ID_Employee', sql.Int, tokenUser.id)
      .input('Start_Date', sql.DateTime, new Date(date))
      .input('End_Date', sql.DateTime, new Date(date))
      .input('Description', sql.NVarChar(sql.MAX), description || '')
      .input('Hours_Spent', sql.Decimal(5, 2), hours)
      .query(`
        INSERT INTO Execution (ID_Task, ID_Employee, Start_Date, End_Date, Description, Hours_Spent)
        VALUES (@ID_Task, @ID_Employee, @Start_Date, @End_Date, @Description, @Hours_Spent)
      `);

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ, –ø—Ä–æ–µ–∫—Ç–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    const infoResult = await pool.request()
      .input('ID_Task', sql.Int, taskName)
      .input('ID_User', sql.Int, tokenUser.id)
      .query(`
        SELECT 
          t.Task_Name,
          o.Order_Name,
          o.ID_Team,
          u.First_Name + ' ' + u.Last_Name AS EmployeeName
        FROM Tasks t
        JOIN Orders o ON t.ID_Order = o.ID_Order
        JOIN Users u ON u.ID_User = @ID_User
        WHERE t.ID_Task = @ID_Task
      `);

    const taskInfo = infoResult.recordset[0];
    if (!taskInfo) {
      return res.status(201).json({ message: '–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–µ)' });
    }

    // 3. –ü–æ–∏—Å–∫ email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    const managerResult = await pool.request()
      .input('ID_Team', sql.Int, taskInfo.ID_Team)
      .query(`
        SELECT TOP 1 u.Email
        FROM TeamMembers tm
        JOIN Users u ON tm.ID_User = u.ID_User
        WHERE tm.ID_Team = @ID_Team AND u.ID_Role IN (
          SELECT ID_Role FROM Roles WHERE Role_Name LIKE N'%–º–µ–Ω–µ–¥–∂–µ—Ä%'
        )
      `);

    const managerEmail = managerResult.recordset[0]?.Email;
    if (managerEmail) {
      await createNotification({
        userEmail: managerEmail,
        title: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—Ä–µ–º–µ–Ω–∏',
        description: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${taskInfo.EmployeeName} –¥–æ–±–∞–≤–∏–ª –≤—Ä–µ–º—è –∫ –∑–∞–¥–∞—á–µ "${taskInfo.Task_Name}"`,
      });
    }

    res.status(201).json({ message: '–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
const updateTimeEntry = async (req, res) => {
  const { id } = req.params;
  const { taskName, description, hours, date } = req.body;

  try {
    await poolConnect;

    const tokenUser = req.user;
    if (!tokenUser?.id) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    await pool.request()
      .input('ID_Execution', sql.Int, id)
      .input('ID_Task', sql.Int, taskName)
      .input('Start_Date', sql.DateTime, new Date(date))
      .input('End_Date', sql.DateTime, new Date(date))
      .input('Description', sql.NVarChar(sql.MAX), description || '')
      .input('Hours_Spent', sql.Decimal(5, 2), hours)
      .query(`
        UPDATE Execution
        SET ID_Task = @ID_Task,
            Start_Date = @Start_Date,
            End_Date = @End_Date,
            Description = @Description,
            Hours_Spent = @Hours_Spent
        WHERE ID_Execution = @ID_Execution AND ID_Employee = ${tokenUser.id}
      `);

    res.status(200).json({ message: '–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
const deleteTimeEntry = async (req, res) => {
  const { id } = req.params;

  try {
    await poolConnect;

    const tokenUser = req.user;
    if (!tokenUser?.id) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    await pool.request()
      .input('ID_Execution', sql.Int, id)
      .input('ID_Employee', sql.Int, tokenUser.id)
      .query(`
        DELETE FROM Execution WHERE ID_Execution = @ID_Execution AND ID_Employee = @ID_Employee
      `);

    res.status(200).json({ message: '–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
const getTimeEntries = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    const result = await pool.request()
      .query(`
        SELECT 
          e.ID_Execution,
          e.ID_Task,
          t.Task_Name,
          o.Order_Name,
          e.Start_Date,
          e.End_Date,
          e.Hours_Spent,
          e.Description,
          u.ID_User,
          u.First_Name + ' ' + u.Last_Name AS Employee_Name,
          tm.Team_Name
        FROM Execution e
        INNER JOIN Tasks t ON e.ID_Task = t.ID_Task
        INNER JOIN Orders o ON t.ID_Order = o.ID_Order
        INNER JOIN Users u ON e.ID_Employee = u.ID_User
        INNER JOIN Teams tm ON o.ID_Team = tm.ID_Team
      `);

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

module.exports = {
  createTimeEntry,
  updateTimeEntry,
  deleteTimeEntry,
  getTimeEntries
};
