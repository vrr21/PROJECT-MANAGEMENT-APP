const express = require('express');
const router = express.Router();
const { pool, sql } = require('../config/db');
const {
  Document,
  Packer,
  Paragraph,
  Table,
  TableCell,
  TableRow
} = require('docx');

// üîπ –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
router.get('/employee/:id', async (req, res) => {
  const id = parseInt(req.params.id, 10);
  try {
    const result = await pool.request()
      .input('ID_User', sql.Int, id)
      .query(`
        SELECT * FROM EmployeeTaskExecution 
        WHERE Employee_Name IN (
          SELECT First_Name + ' ' + Last_Name FROM Users WHERE ID_User = @ID_User
        )
      `);

    res.json(result.recordset);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞' });
  }
});

// üîπ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ Word
router.get('/export-word/:id', async (req, res) => {
  const id = parseInt(req.params.id, 10);
  try {
    const result = await pool.request()
      .input('ID_User', sql.Int, id)
      .query(`
        SELECT * FROM EmployeeTaskExecution 
        WHERE Employee_Name IN (
          SELECT First_Name + ' ' + Last_Name FROM Users WHERE ID_User = @ID_User
        )
      `);

    const rows = result.recordset;
    if (!rows || rows.length === 0) {
      return res.status(404).json({ message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' });
    }

    const doc = new Document();
    doc.addSection({
      children: [
        new Paragraph({ text: '–û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', heading: 'Heading1' }),
        new Table({
          rows: [
            new TableRow({
              children: Object.keys(rows[0]).map(key =>
                new TableCell({
                  children: [new Paragraph(key)]
                })
              )
            }),
            ...rows.map(row =>
              new TableRow({
                children: Object.values(row).map(val =>
                  new TableCell({
                    children: [new Paragraph(String(val ?? ''))]
                  })
                )
              })
            )
          ]
        })
      ]
    });

    const buffer = await Packer.toBuffer(doc);
    res.setHeader('Content-Disposition', 'attachment; filename=employee-report.docx');
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
    res.send(buffer);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Word –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ' });
  }
});

// üîπ –û–±—â–∏–π –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
router.get('/all', async (req, res) => {
  try {
    const result = await pool.request().query(`
      SELECT * FROM EmployeeTaskExecution
    `);

    const rows = result.recordset;
    res.json(Array.isArray(rows) ? rows : []);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞' });
  }
});

// üîπ –≠–∫—Å–ø–æ—Ä—Ç –æ–±—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞
router.get('/export-all', async (req, res) => {
  try {
    const result = await pool.request().query(`
      SELECT * FROM EmployeeTaskExecution
    `);
    const rows = result.recordset;

    if (!rows || rows.length === 0) {
      return res.status(404).json({ message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' });
    }

    const doc = new Document();
    doc.addSection({
      children: [
        new Paragraph({ text: '–û–±—â–∏–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', heading: 'Heading1' }),
        new Table({
          rows: [
            new TableRow({
              children: Object.keys(rows[0]).map(key =>
                new TableCell({ children: [new Paragraph(key)] })
              )
            }),
            ...rows.map(row =>
              new TableRow({
                children: Object.values(row).map(val =>
                  new TableCell({ children: [new Paragraph(String(val ?? ''))] })
                )
              })
            )
          ]
        })
      ]
    });

    const buffer = await Packer.toBuffer(doc);
    res.setHeader('Content-Disposition', 'attachment; filename=manager-report.docx');
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
    res.send(buffer);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ' });
  }
});

module.exports = router;
