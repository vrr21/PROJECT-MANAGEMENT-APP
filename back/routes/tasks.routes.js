// back/routes/tasks.routes.js

const express = require('express');
const router = express.Router();
const taskController = require('../controllers/task.controller');
const { poolConnect, pool, sql } = require('../config/db');

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID —Å –ª–æ–≥–æ–º
router.get('/employee/:id', (req, res, next) => {
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å ID:', req.params.id);
  next();
}, taskController.getTasksByEmployee);

// üîπ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ)
router.get('/search', async (req, res) => {
  const { q } = req.query;
  try {
    await poolConnect;
    const result = await pool.request()
      .input('query', sql.NVarChar, `%${q}%`)
      .query(`
        SELECT ID_Task, Task_Name
        FROM Tasks
        WHERE Task_Name LIKE @query OR Description LIKE @query
      `);
    res.json(result.recordset);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á', error: error.message });
  }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—è–º–∏ (–≤–∫–ª—é—á–∞—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Å—Ç–∞—Ç—É—Å—ã, –∫–æ–º–∞–Ω–¥—ã)
router.get('/details', taskController.getTasksWithDetails);

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏)
router.delete('/without-employees', taskController.deleteTasksWithoutEmployees);

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
router.post('/', taskController.createTask);

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
router.put('/:id', taskController.updateTask);

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
router.delete('/:id', taskController.deleteTask);

// üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
router.patch('/:id/close', taskController.closeTask);

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
router.put('/:taskId/status', taskController.updateEmployeeTaskStatus);
router.put('/:taskId/update-status', taskController.updateEmployeeTaskStatus); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –ø–æ –∫–æ–º–∞–Ω–¥–µ)
router.get('/', taskController.getAllTasks);
router.patch('/:id/archive', taskController.archiveTask);


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
router.post('/check-employees', taskController.checkEmployeesExist);



module.exports = router;
